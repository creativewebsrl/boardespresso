"use strict";

var mongoose = require('mongoose'),
    Schema = mongoose.Schema,
    conn;

//###############
//### SERVICE ###
//###############

var Service = new Schema({
    desc : { type: String, required: true, default: '' },
    updated_at : { type: Date, required: false },
    last_value: { type: String, required: false }
},{ strict: true });

Service
.virtual('code')
.get(function(){ return this._id; });


Service.pre('save', function (next) {
  if (this.last_value ===null || this.last_value===undefined) {
     this.updated_at = null;
  } else {
     this.updated_at = new Date();
  }
  next();
});

var ServiceModel = mongoose.model('Service',Service);

// ### END ###

//############
//### User ###
//############

var User = new Schema({
    'services' : { type: [Service], required : false }
    // other elements will be inserted via mongoose-auth
    // we're getting for sure
    //   email,name{first,last},active
    // evenctually
    //   password
},{ strict: true });

User.statics.getUserServices = function(user_id,callback){
    if (!user_id) { callback(null,[]); return; }
    
    mongoose.model('User').findById(user_id,['services'],
        function(err,data){
            if (!err) {
              callback(null,data.services || [])
            } else {
              callback(err,[]);
            }
    });
};

User.pre('save', function (next) {
  // if (!this._id) email(this.email, 'Your record has changed');
  next();
});

var UserModel = null; // must wait for dashboard-auth to add types

//### END ###

module.exports = {
    init : function(conf){
        conn = mongoose.connect(conf.host,conf.databaseName,conf.port);
        return conn;
    },
    conn : function(){
        return conn;
    },
    model: function(modelName) {
        return mongoose.model(modelName);
    },
    ObjectId : function(key){
        if (key) return mongoose.Types.ObjectId(key);
        else return conn.mongo.ObjectID.createPk();
    },
    getUserSchema : function() {
        return User;
    },
    createUserModel : function(){
        // create the user model using the most up to date User schema available
        UserModel = mongoose.model('User',User);
        return UserModel;
    }
};