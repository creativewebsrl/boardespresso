"use strict";

var mongoose = require('mongoose'),
    crypto = require('crypto'),
    Schema = mongoose.Schema,
    conn;

//###############
//### SERVICE ###
//###############

var Service = new Schema({
    desc : { type: String, required: true, default: '' },
    updated_at : { type: Date, required: false },
    last_value: { type: String, required: false }
},{ strict: true });

Service
.virtual('code')
.get(function(){ return this._id; });


Service.pre('save', function (next) {
  if (this.last_value ===null || this.last_value===undefined) {
     this.updated_at = null;
  } else {
     this.updated_at = new Date();
  }
  next();
});

var ServiceModel = mongoose.model('Service',Service);

// ### END ###


// ### Widget ###

var Widget = new Schema({
    type : { type : String, required: true},
    
    title : { type: String, required: false },
    last_values : [String],
    keep_last_n_values : { type: Number, default:2, min: 2, required: true},
    
    data_source : { type: String, required: true, enum: ['url','service_id'] },
    
    service_id: { type: Schema.ObjectId, required:false },
    
    url: { type: String, required: false },
    poll_frequency: { type: Number, min: 0.1, required: false }, // check url each n seconds
    
    timeout: { type: Number, min: 1, required: true}, // after such time something has gone wrong
    
    updated_at : { type: Date, required: false},
    active : { type: Boolean, default: true}
    
},{ strict: false }); /* XXX strict will stay false until comes his time to be fixed */
console.warn("Model Widget is not strict !");

Widget.virtual('value')
.get(function () {
  return this.values.length ? this.values[this.values.length-1] : null;
})
.set(function(value){
    this.last_values.push(value);
    if (this.last_values.length > this.keep_last_n_values) {
        this.last_values.splice(0,1); // drop the oldest
    }
});

var WidgetModel = mongoose.model('Widget',Widget);

//### END ###


//############
//### User ###
//############

var User = new Schema({
    'email': { type: String, trim: true, required: true, unique: true },
    'salt': { type: String },
    'hashed_password': String,
    'active': { type: Boolean},
    'services' : { type: [Service], required : false },
    'widgets' : { type: [Widget], required : false }
},{ strict: true });

User.virtual('id')
.get(function() {
  return this._id.toHexString();
});

User.virtual('password')
.set(function(password) {
  if (!password.trim()) return; // ignore passwords empty or full spaces
  
  this._password = password; // do not trim whitespaces in a password
  
  this.salt = UserModel.makeSalt();
  this.hashed_password = this.encryptPassword(password);
})
.get(function() { return this._password; });

User.method('authenticate', function(plainText) {
    return this.encryptPassword(plainText) === this.hashed_password;
});

User.statics.makeSalt = function() {
    return Math.round((new Date().valueOf() * Math.random())) + '';
};

User.method('encryptPassword', function(password) {
    if (!password) return password;
    return crypto.createHmac('sha1', this.salt).update(password).digest('hex');
});

User.pre('save', function(next) {
    if (this.isNew && !this._password) {
        var valError = new mongoose.Document.ValidationError(this);
        valError.errors['password'] = 'missing password';
        next(valError);
    } else {
        next();
    }
});


User.statics.getServices = function(user_id,callback){
    if (!user_id) { callback(null,[]); return; }
    
    UserModel.findById(user_id,['services'],
        function(err,data){
            if (!err) {
              callback(null,data.services || [])
            } else {
              callback(err,[]);
            }
    });
};

User.statics.getWidgets = function(user_id,callback){
    if (!user_id) { callback(null,[]); return; }
  
    UserModel.findById(user_id,['widgets'],
        function(err,data){
            if (!err) {
              callback(null,data.widgets || [])
            } else {
              callback(err,[]);
            }
    });
};

User.pre('save', function (next) {
  // if (!this._id) email(this.email, 'Your record has changed');
  next();
});

var UserModel = mongoose.model('User',User);

//### END ###

// ##############

module.exports = {
    init : function(conf){
        conn = mongoose.connect(conf.host,conf.databaseName,conf.port);
        return conn;
    },
    conn : function(){
        return mongoose.connection.db;
    },
    model: function(modelName) {
        return mongoose.model(modelName);
    },
    ObjectId : function(key){
        if (key) return mongoose.Types.ObjectId(key);
        else return conn.mongo.ObjectID.createPk();
    }
};